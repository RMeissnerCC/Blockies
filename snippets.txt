The drawing view with onFlingListener:

    GestureDetectorCompat mDetector = new GestureDetectorCompat(this.getContext(), new FlingDownListener());

    /**
     * Listener to recognize fling down
     */
    class FlingDownListener extends GestureDetector.SimpleOnGestureListener {
        private static final int SWIPE_MIN_DISTANCE = 100;

        @Override
        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
            if (e2.getY() - e1.getY() > SWIPE_MIN_DISTANCE) {
                mover.moveToBottom();
            }
            return false;
        }
    }

     @Override
        public boolean onTouch(View view, MotionEvent motionEvent) {
            int index = motionEvent.getActionIndex();
            int action = motionEvent.getActionMasked();
            int pointerId = motionEvent.getPointerId(index);

            if (isInit && mover != null) {
                int step = width/StaticGameEnvironment.HORIZONTAL_BLOCK_COUNT;
                if(motionEvent.getAction() == MotionEvent.ACTION_MOVE){
                    float x = motionEvent.getX();
                    float deltaX = x-histX;
                    if(Math.abs(deltaX) > step/1.5) {
                        histX = x;
                        int direction = deltaX < 0 ? -1 : 1;
                        mover.moveHorizontalPosition(direction);
                    }

                    float y = motionEvent.getY();
                    float deltaY = y - histY;
                    if(Math.abs(deltaY) > step/2){
                        histY = y;
                        if(deltaY > 0) {
                            mover.moveBlockDown();
                        }
                    }
                }
            }
            this.mDetector.onTouchEvent(motionEvent);
            return true;
        }


        public void moveToBottom() {
                if(isBlockInGame()) {
                    removeOldPosition();
                    while(!isGroundReachedOnNext() && !isNextOccupied()){
                        int y = block.getY();
                        block.setY(++y);
                    }
                    addNewPosition();
                    removeBlock();
                }
            }

            public int getLowestFreeInColumn(int x){
                    int freeCell = -1;
                    for(int i = logicalGrid[x].length-1; i >= 0 ; i--){
                        int cell = logicalGrid[x][i];
                        if(cell == 0){
                            freeCell = cell;
                            break;
                        }
                    }
                    return freeCell;
                }


                private boolean isHorizontalNeighborOccupied(int offset) {
                        boolean check = false;
                        if (block.getX() + offset < 0) {
                            check = true;
                        } else if (block.getX() + offset + block.getOffsetX() > StaticGameEnvironment.HORIZONTAL_BLOCK_COUNT) {
                            check = true;
                        } else {
                            for (int i = 0; i < block.getOffsetX(); i++) {
                                for (int j = 0; j < block.getOffsetY(); j++) {
                                    int nextColumn = i + offset;
                                    boolean isLastColumn = offset < 0 ? nextColumn < 0 : nextColumn >= block.getOffsetX();
                                    boolean compoundBlocksNotItself = (offset < 0 ? nextColumn >= 0 : nextColumn < block.getOffsetX())
                                            && !(block.getInner(nextColumn, j) > 0);
                                    if (block.getInner(i, j) > -1 && (isLastColumn || compoundBlocksNotItself)) {
                                        if (grid.getPositionValue(block.getX() + i + offset, j + block.getY()) > -1) {
                                            check = true;
                                        }
                                    }
                                }
                            }
                        }
                        return check;
                    }

            private boolean isNextOccupied() {
                    boolean check = false;
                    for (int i = 0; i < block.getOffsetX(); i++) {
                        for (int j = 0; j < block.getOffsetY(); j++) {
                            int nextRow = j + 1;
                            boolean isLastRow = nextRow >= block.getOffsetY();
                            boolean compoundBlocksNotItself = nextRow < block.getOffsetY() && !(block.getInner(i, nextRow) > -1);
                            if (block.getInner(i, j) > -1 && (isLastRow || compoundBlocksNotItself)) {
                                if (grid.getPositionValue(i + block.getX(), j + 1 + block.getY()) > -1) {
                                    check = true;
                                }
                            }
                        }
                    }
                    return check;
                }